// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package navigation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NavigationClient is the client API for Navigation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavigationClient interface {
	GetNavigation(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Navigation_GetNavigationClient, error)
}

type navigationClient struct {
	cc grpc.ClientConnInterface
}

func NewNavigationClient(cc grpc.ClientConnInterface) NavigationClient {
	return &navigationClient{cc}
}

func (c *navigationClient) GetNavigation(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Navigation_GetNavigationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Navigation_serviceDesc.Streams[0], "/navigation.Navigation/GetNavigation", opts...)
	if err != nil {
		return nil, err
	}
	x := &navigationGetNavigationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Navigation_GetNavigationClient interface {
	Recv() (*NavigationMessage, error)
	grpc.ClientStream
}

type navigationGetNavigationClient struct {
	grpc.ClientStream
}

func (x *navigationGetNavigationClient) Recv() (*NavigationMessage, error) {
	m := new(NavigationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NavigationServer is the server API for Navigation service.
// All implementations must embed UnimplementedNavigationServer
// for forward compatibility
type NavigationServer interface {
	GetNavigation(*EmptyMessage, Navigation_GetNavigationServer) error
	mustEmbedUnimplementedNavigationServer()
}

// UnimplementedNavigationServer must be embedded to have forward compatible implementations.
type UnimplementedNavigationServer struct {
}

func (UnimplementedNavigationServer) GetNavigation(*EmptyMessage, Navigation_GetNavigationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNavigation not implemented")
}
func (UnimplementedNavigationServer) mustEmbedUnimplementedNavigationServer() {}

// UnsafeNavigationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavigationServer will
// result in compilation errors.
type UnsafeNavigationServer interface {
	mustEmbedUnimplementedNavigationServer()
}

func RegisterNavigationServer(s grpc.ServiceRegistrar, srv NavigationServer) {
	s.RegisterService(&_Navigation_serviceDesc, srv)
}

func _Navigation_GetNavigation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NavigationServer).GetNavigation(m, &navigationGetNavigationServer{stream})
}

type Navigation_GetNavigationServer interface {
	Send(*NavigationMessage) error
	grpc.ServerStream
}

type navigationGetNavigationServer struct {
	grpc.ServerStream
}

func (x *navigationGetNavigationServer) Send(m *NavigationMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Navigation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "navigation.Navigation",
	HandlerType: (*NavigationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNavigation",
			Handler:       _Navigation_GetNavigation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "navigation.proto",
}
